"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useScrollLock = exports.disableScrollLock = exports.enableScrollLock = exports.DATA_RMD_NOSCROLL = void 0;
var react_1 = require("react");
/**
 * This is used with the `useScrollLock` effect to determine if the styles were
 * applied by scroll locking or not in the cleanup stage.
 */
exports.DATA_RMD_NOSCROLL = "data-rmd-noscroll";
/**
 * This will enable scroll locking for the provided element. Scroll locking
 * works by fixing the element within the page and hiding overflow for that
 * element.
 *
 * @param element - Either the `<body>` tag or an element within the page to
 * disable scroll for.
 * @internal
 * @remarks \@since 5.0.0 Renamed from `enable` to `enableScrollLock`.
 */
function enableScrollLock(element) {
    element.style.overflow = "hidden";
    element.setAttribute(exports.DATA_RMD_NOSCROLL, "");
}
exports.enableScrollLock = enableScrollLock;
/**
 * Attempts to disable the scroll locking behavior for an element. If the
 * element does not have `data-rmd-noscroll`, it will not be modified. This is
 * really just a safety catch to ensure that pre-existing styles aren't removed
 * on accident.
 *
 * If the `data-rmd-noscroll` attribute exists, overflow style and the
 * `data-rmd-noscroll` attribute will be removed.
 *
 * @param element - Either the `<body>` tag or an element within the page to
 * disable scroll locking for.
 * @internal
 * @remarks \@since 5.0.0 Renamed from `disable` to `disableScrollLock`.
 */
function disableScrollLock(element) {
    if (element.getAttribute(exports.DATA_RMD_NOSCROLL) === null) {
        return;
    }
    element.style.overflow = "";
    element.removeAttribute(exports.DATA_RMD_NOSCROLL);
}
exports.disableScrollLock = disableScrollLock;
/**
 * A hook that is used to dynamically add scroll locking to an element. By
 * default, this will use the main `<body>` tag for scroll locking, but a query
 * selector string or an HTML element can also be used instead.
 *
 * @param enabled - Boolean if the scroll locking behavior should be enabled
 * @param selectorOrElement - Either a query selector string, HTMLElement, or a
 * function that returns an HTMLElement to apply scroll locking to.
 */
function useScrollLock(enabled, selectorOrElement) {
    (0, react_1.useEffect)(function () {
        if (!enabled || typeof document === "undefined") {
            return;
        }
        var element = null;
        if (typeof selectorOrElement === "string") {
            element = document.querySelector(selectorOrElement);
        }
        else if (typeof selectorOrElement === "function") {
            element = selectorOrElement();
        }
        else if (selectorOrElement) {
            element = selectorOrElement;
        }
        else {
            element = document.body;
        }
        if (!element || element.getAttribute(exports.DATA_RMD_NOSCROLL) !== null) {
            return;
        }
        enableScrollLock(element);
        return function () {
            disableScrollLock(element);
        };
    }, [enabled, selectorOrElement]);
}
exports.useScrollLock = useScrollLock;
//# sourceMappingURL=useScrollLock.js.map