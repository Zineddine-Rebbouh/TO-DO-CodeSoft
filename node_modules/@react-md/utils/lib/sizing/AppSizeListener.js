"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSizeListener = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var constants_1 = require("./constants");
var useAppSize_1 = require("./useAppSize");
var useAppSizeMedia_1 = require("./useAppSizeMedia");
/**
 * This component should be mounted near the top of your app as it will keep
 * track of the current app size based on the provided breakpoint widths.
 */
function AppSizeListener(_a) {
    var children = _a.children, onChange = _a.onChange, _b = _a.phoneMaxWidth, phoneMaxWidth = _b === void 0 ? constants_1.DEFAULT_PHONE_MAX_WIDTH : _b, _c = _a.tabletMinWidth, tabletMinWidth = _c === void 0 ? constants_1.DEFAULT_TABLET_MIN_WIDTH : _c, _d = _a.tabletMaxWidth, tabletMaxWidth = _d === void 0 ? constants_1.DEFAULT_TABLET_MAX_WIDTH : _d, _e = _a.desktopMinWidth, desktopMinWidth = _e === void 0 ? constants_1.DEFAULT_DESKTOP_MIN_WIDTH : _e, _f = _a.desktopLargeMinWidth, desktopLargeMinWidth = _f === void 0 ? constants_1.DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _f, _g = _a.defaultSize, defaultSize = _g === void 0 ? useAppSizeMedia_1.DEFAULT_APP_SIZE : _g;
    var appSize = (0, useAppSizeMedia_1.useAppSizeMedia)({
        phoneMaxWidth: phoneMaxWidth,
        tabletMaxWidth: tabletMaxWidth,
        tabletMinWidth: tabletMinWidth,
        desktopMinWidth: desktopMinWidth,
        desktopLargeMinWidth: desktopLargeMinWidth,
        defaultSize: defaultSize,
    });
    var lastValue = (0, react_1.useRef)(appSize);
    (0, react_1.useEffect)(function () {
        // trigger the onChange prop on mount only if there is a difference between
        // the defaultSize and the mounted size.
        if (onChange &&
            (defaultSize.isPhone !== appSize.isPhone ||
                defaultSize.isTablet !== appSize.isTablet ||
                defaultSize.isDesktop !== appSize.isDesktop ||
                defaultSize.isLargeDesktop !== appSize.isLargeDesktop ||
                defaultSize.isLandscape !== appSize.isLandscape)) {
            onChange(appSize, defaultSize);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    (0, react_1.useEffect)(function () {
        if (lastValue.current !== appSize) {
            if (onChange) {
                onChange(appSize, lastValue.current);
            }
            lastValue.current = appSize;
        }
    });
    var value = (0, react_1.useMemo)(function () { return (__assign(__assign({}, appSize), { __initialized: true })); }, [appSize]);
    return ((0, jsx_runtime_1.jsx)(useAppSize_1.AppSizeContext.Provider, __assign({ value: value }, { children: children })));
}
exports.AppSizeListener = AppSizeListener;
//# sourceMappingURL=AppSizeListener.js.map