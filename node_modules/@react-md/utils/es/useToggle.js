var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { useCallback, useState } from "react";
import { useRefCache } from "./useRefCache";
/**
 * This hooks provides an easy way to toggle a boolean flag for React
 * components.  The main use case for this will be toggling the visibility of
 * something. All the provided actions are guaranteed to never change.
 *
 * @param defaultToggled - Boolean if the visibility should be enabled first
 * render.
 * @returns an array containing the toggled state, an enable function, a disable
 * function, a toggle function, and then a manual set toggle function.
 */
export function useToggle(defaultToggled) {
    var _a = __read(useState(defaultToggled), 2), toggled = _a[0], setToggled = _a[1];
    var previous = useRefCache(toggled);
    var enable = useCallback(function () {
        if (!previous.current) {
            setToggled(true);
        }
        // disabled since useRefCache
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var disable = useCallback(function () {
        if (previous.current) {
            setToggled(false);
        }
        // disabled since useRefCache
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var toggle = useCallback(function () {
        setToggled(function (prevVisible) { return !prevVisible; });
    }, []);
    return [toggled, enable, disable, toggle, setToggled];
}
//# sourceMappingURL=useToggle.js.map