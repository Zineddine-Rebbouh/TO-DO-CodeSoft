var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext } from "react";
import { useInteractionMode } from "./useInteractionMode";
/**
 * @internal
 */
var modeContext = createContext("mouse");
/**
 * @internal
 */
var parentContext = createContext(false);
/**
 * @internal
 */
var UserInteractionModeProvider = modeContext.Provider;
/**
 * @internal
 */
var ParentProvider = parentContext.Provider;
/**
 * Returns the current user interaction mode.
 *
 * @returns {@link UserInteractionMode}
 */
export function useUserInteractionMode() {
    return useContext(modeContext);
}
/**
 * Example:
 *
 * ```ts
 * const isKeyboard = useIsUserInteractionMode("keyboard");
 * // do stuff if keyboard only
 * ```
 *
 * @param mode - The {@link UserInteractionMode} to check against.
 * @returns `true` if the current user interaction mode matches the provided
 * mode.
 */
export function useIsUserInteractionMode(mode) {
    return useUserInteractionMode() === mode;
}
/**
 * This component is used to determine how the user is current interacting with
 * your app as well as modifying the `document.body`'s `className` with the
 * current mode. This is what allows the `rmd-utils-phone-only`,
 * `rmd-utils-keyboard-only`, and `rmd-utils-mouse-only` mixins to work.
 *
 * @remarks \@since 2.6.0 Renamed from `InteractionModeListener`
 * @throws When this component has been mounted multiple times in your app.
 */
export function UserInteractionModeListener(_a) {
    var children = _a.children;
    var mode = useInteractionMode();
    if (useContext(parentContext)) {
        throw new Error("Mounted multiple `UserInteractionModeListener` components.");
    }
    return (_jsx(UserInteractionModeProvider, __assign({ value: mode }, { children: _jsx(ParentProvider, __assign({ value: true }, { children: children })) })));
}
//# sourceMappingURL=UserInteractionModeListener.js.map