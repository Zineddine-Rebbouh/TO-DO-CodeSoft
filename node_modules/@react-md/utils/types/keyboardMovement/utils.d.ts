import type { KeyboardFocusElementData } from "./types";
/**
 * @remarks \@since 5.0.0
 * @internal
 */
export declare const focusElement: (element: HTMLElement) => void;
/**
 * @remarks \@since 5.0.0
 * @internal
 */
export declare const isNotFocusable: (element: HTMLElement | undefined, includeDisabled: boolean) => boolean;
/**
 * @remarks \@since 5.0.0
 * @internal
 */
export declare const getFirstFocusableIndex: (watching: readonly KeyboardFocusElementData[], includeDisabled: boolean) => number;
/**
 * @remarks \@since 5.0.0
 * @internal
 */
export declare const getLastFocusableIndex: (watching: readonly KeyboardFocusElementData[], includeDisabled: boolean) => number;
/**
 * @remarks \@since 5.0.0
 * @internal
 */
interface NextFocusableIndexOptions {
    loopable: boolean;
    watching: readonly KeyboardFocusElementData[];
    increment: boolean;
    includeDisabled: boolean;
    currentFocusIndex: number;
}
/**
 * @remarks \@since 5.0.0
 * @internal
 */
export declare const getNextFocusableIndex: ({ loopable, watching, increment, includeDisabled, currentFocusIndex, }: NextFocusableIndexOptions) => number;
/**
 * @remarks \@since 5.0.0
 * @internal
 */
export declare function getSearchText(element: HTMLElement, searchable: boolean): string;
export {};
